program: sweep_crowd.py
method: grid
parameters:
  seed:
    values:
      - 0
      - 1
      - 2
  trainer.PPOConfig.gamma:
    values:
      - 0.9
      - 0.99
      - 0.999
  trainer.PPOConfig.eps:
    values:
      - 0.2
      - 0.15
      - 0.3
  model.vec_hidden_layers:
    values:
      - [32, 32]
      - [32, 32, 32]
  model.rel_hidden_layers:
    values:
      - [32, 32]
      - [32, 32, 32]
  model.com_hidden_layers:
    values:
      - [32, 32]
      - [32, 32, 32]
  environment.collision:
    values:
      - -0.1
      - -0.2
      - -0.3
      - -0.5
      - -0.7



#program: sweep_crowd.py
#method: grid
#metric:
#  goal: minimize
#  name: stats/mean_collision_min
#parameters:
#  environment.comfort_distance_weight:
#    max: 2
#    min: 1
#    distribution: int_uniform
#  environment.comfort_speed_weight:
#    max: 3
#    min: 0.75
#    distribution: uniform
#  environment.comfort_distance:
#    max: 3
#    min: 0.75
#    distribution: uniform
#  environment.comfort_speed:
#    max: 2.8
#    min: 0.7
#    distribution: uniform
#  environment.sight_radius:
#    max: 10
#    min: 3
#    distribution: int_uniform
#  environment.sight_agents:
#    max: 20
#    min: 5
#    distribution: int_uniform
#  environment.potential:
#    max: 0.8
#    min: 0.2
#    distribution: uniform
#  environment.collision:
#    max: -0.15
#    min: -0.6
#    distribution: uniform
#  environment.agents:
#    max: 40
#    min: 10
#    distribution: int_uniform
#  environment.mode:
#    values:
#      - hallway
#    distribution: categorical
#  environment.goal:
#    max: 2
#    min: 1
#    distribution: int_uniform
#  trainer.tensorboard_name:
#    values:
#      - crowd-sweep
#    distribution: categorical
#  trainer.save_freq:
#    max: 20
#    min: 5
#    distribution: int_uniform
#  trainer.PPOConfig.advantage_normalization:
#    values:
#      - "true"
#      - "false"
#    distribution: categorical
#  trainer.PPOConfig.entropy_decay_time:
#    max: 200
#    min: 50
#    distribution: int_uniform
#  trainer.PPOConfig.OptimizerKwargs.amsgrad:
#    values:
#      - "true"
#      - "false"
#    distribution: categorical
#  trainer.PPOConfig.OptimizerKwargs.eps:
#    max: 2e-7
#    min: 5e-8
#    distribution: uniform
#  trainer.PPOConfig.OptimizerKwargs.lr:
#    max: 0.0001
#    min: 0.000025
#    distribution: uniform
#  trainer.PPOConfig.minibatch_size:
#    max: 2048
#    min: 512
#    distribution: int_uniform
#  trainer.PPOConfig.value_coeff:
#    max: 2
#    min: 1
#    distribution: int_uniform
#  trainer.PPOConfig.ppo_epochs:
#    max: 20
#    min: 5
#    distribution: int_uniform
#  trainer.PPOConfig.gae_lambda:
#    max: 1.9
#    min: 0.475
#    distribution: uniform
#  trainer.PPOConfig.target_kl:
#    max: 0.06
#    min: 0.015
#    distribution: uniform
#  trainer.PPOConfig.optimizer:
#    values:
#      - adam
#    distribution: categorical
#  trainer.PPOConfig.use_gpu:
#    values:
#      - "true"
#      - "false"
#    distribution: categorical
#  trainer.PPOConfig.gamma:
#    max: 1.98
#    min: 0.495
#    distribution: uniform
#  trainer.PPOConfig.eta:
#    max: 1
#    min: 0.25
#    distribution: uniform
#  trainer.PPOConfig.eps:
#    max: 0.4
#    min: 0.1
#    distribution: uniform
#  trainer.workers:
#    max: 8
#    min: 2
#    distribution: int_uniform
#  trainer.steps:
#    max: 1000
#    min: 250
#    distribution: int_uniform
#  model.buffer_input_size:
#    max: 8
#    min: 0
#    distribution: int_uniform
#  model.separate_value:
#    values:
#      - "true"
#      - "false"
#    distribution: categorical
#  model.rel_input_size:
#    max: 8
#    min: 2
#    distribution: int_uniform
#  model.conv_filters:
#    max: 4
#    min: 1
#    distribution: int_uniform
#  model.num_actions:
#    max: 4
#    min: 1
#    distribution: int_uniform
#  model.initializer:
#    values:
#      - orthogonal
#    distribution: categorical
#  model.input_size:
#    max: 14
#    min: 1
#    distribution: int_uniform
#  model.activation:
#    values:
#      - tanh
#    distribution: categorical
#  model.discrete:
#    values:
#      - "true"
#      - "false"
#    distribution: categorical
#  model.sigma0:
#    max: 2
#    min: 1
#    distribution: int_uniform
#
#
##program: sweep_crowd.py
##method: grid
##parameters:
##  environment.comfort_distance_weight:
##    values:
##      - 0.5
##      - 0.8
##  trainer.PPOConfig.gamma:
##    values:
##      - 0.99
##      - 0.98
##      - 0.999
##  model.vec_hidden_sizes:
##    values:
##      - [64, 64]
##      - [64, 64, 64]
##      - [256, 256]
##  environment.mode:
##    values:
##      - random
##      - hallway
##
